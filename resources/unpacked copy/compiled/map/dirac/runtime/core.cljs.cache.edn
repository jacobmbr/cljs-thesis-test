;; Analyzed by ClojureScript 1.8.51
{:use-macros {get-current-browser-name dirac.runtime.core, get-current-platform-name dirac.runtime.core}, :excludes #{}, :name dirac.runtime.core, :imports nil, :requires {prefs dirac.runtime.prefs, ua-platform goog.labs.userAgent.platform, ua-browser goog.labs.userAgent.browser, dirac.runtime.repl dirac.runtime.repl, goog.labs.userAgent.platform goog.labs.userAgent.platform, dirac.project dirac.project, goog.labs.userAgent.browser goog.labs.userAgent.browser, dirac.runtime.util dirac.runtime.util, repl dirac.runtime.repl, dirac.runtime.prefs dirac.runtime.prefs}, :uses {get-current-version dirac.project, display-banner-if-needed! dirac.runtime.util, make-version-info dirac.runtime.util, install-feature! dirac.runtime.util, make-lib-info dirac.runtime.util, report-unknown-features! dirac.runtime.util}, :defs {known-features {:name dirac.runtime.core/known-features, :file "resources/unpacked/compiled/map/dirac/runtime/core.cljs", :line 11, :column 1, :end-line 11, :end-column 20, :meta {:file "/Users/jacob/Desktop/thesis-cljs/resources/unpacked/compiled/map/dirac/runtime/core.cljs", :line 11, :column 6, :end-line 11, :end-column 20}}, features-to-install-by-default {:name dirac.runtime.core/features-to-install-by-default, :file "resources/unpacked/compiled/map/dirac/runtime/core.cljs", :line 12, :column 1, :end-line 12, :end-column 36, :meta {:file "/Users/jacob/Desktop/thesis-cljs/resources/unpacked/compiled/map/dirac/runtime/core.cljs", :line 12, :column 6, :end-line 12, :end-column 36}}, is-feature-available? {:protocol-inline nil, :meta {:file "/Users/jacob/Desktop/thesis-cljs/resources/unpacked/compiled/map/dirac/runtime/core.cljs", :line 16, :column 7, :end-line 16, :end-column 28, :arglists (quote ([feature]))}, :name dirac.runtime.core/is-feature-available?, :variadic false, :file "resources/unpacked/compiled/map/dirac/runtime/core.cljs", :end-column 28, :method-params ([feature]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 16, :end-line 16, :max-fixed-arity 1, :fn-var true, :arglists (quote ([feature]))}, install! {:protocol-inline nil, :meta {:file "/Users/jacob/Desktop/thesis-cljs/resources/unpacked/compiled/map/dirac/runtime/core.cljs", :line 20, :column 7, :end-line 20, :end-column 15, :arglists (quote ([] [features-to-install])), :top-fn {:variadic false, :max-fixed-arity 1, :method-params ([] [features-to-install]), :arglists ([] [features-to-install]), :arglists-meta (nil nil)}}, :name dirac.runtime.core/install!, :variadic false, :file "resources/unpacked/compiled/map/dirac/runtime/core.cljs", :end-column 15, :top-fn {:variadic false, :max-fixed-arity 1, :method-params ([] [features-to-install]), :arglists ([] [features-to-install]), :arglists-meta (nil nil)}, :method-params ([] [features-to-install]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 20, :end-line 20, :max-fixed-arity 1, :fn-var true, :arglists ([] [features-to-install])}, uninstall! {:protocol-inline nil, :meta {:file "/Users/jacob/Desktop/thesis-cljs/resources/unpacked/compiled/map/dirac/runtime/core.cljs", :line 29, :column 7, :end-line 29, :end-column 17, :arglists (quote ([]))}, :name dirac.runtime.core/uninstall!, :variadic false, :file "resources/unpacked/compiled/map/dirac/runtime/core.cljs", :end-column 17, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 29, :end-line 29, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, get-tag {:protocol-inline nil, :meta {:file "/Users/jacob/Desktop/thesis-cljs/resources/unpacked/compiled/map/dirac/runtime/core.cljs", :line 32, :column 7, :end-line 32, :end-column 14, :arglists (quote ([]))}, :name dirac.runtime.core/get-tag, :variadic false, :file "resources/unpacked/compiled/map/dirac/runtime/core.cljs", :end-column 14, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 32, :end-line 32, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}}, :require-macros {dirac.runtime.core dirac.runtime.core, dirac.project dirac.project, prefs dirac.runtime.prefs, dirac.runtime.prefs dirac.runtime.prefs}, :cljs.analyzer/constants {:seen #{:repl :runtime-tag}, :order [:repl :runtime-tag]}, :doc nil}