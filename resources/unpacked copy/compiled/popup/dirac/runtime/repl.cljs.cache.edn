;; Analyzed by ClojureScript 1.8.51
{:use-macros nil, :excludes #{}, :name dirac.runtime.repl, :imports nil, :requires {goog.object goog.object, brepl clojure.browser.repl, clojure.browser.repl clojure.browser.repl, dirac.runtime.prefs dirac.runtime.prefs, string clojure.string, clojure.string clojure.string, gobject goog.object, ua goog.labs.userAgent.browser, goog.labs.userAgent.browser goog.labs.userAgent.browser}, :uses {get-prefs dirac.runtime.prefs, pref dirac.runtime.prefs}, :defs {dirac-msg-args {:protocol-inline nil, :meta {:file "/Users/jacob/Desktop/thesis-cljs/resources/unpacked/compiled/popup/dirac/runtime/repl.cljs", :line 31, :column 7, :end-line 31, :end-column 21, :arglists (quote ([name args]))}, :name dirac.runtime.repl/dirac-msg-args, :variadic false, :file "resources/unpacked/compiled/popup/dirac/runtime/repl.cljs", :end-column 21, :method-params ([name args]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 31, :end-line 31, :max-fixed-arity 2, :fn-var true, :arglists (quote ([name args]))}, log {:protocol-inline nil, :meta {:file "/Users/jacob/Desktop/thesis-cljs/resources/unpacked/compiled/popup/dirac/runtime/repl.cljs", :line 40, :column 7, :end-line 40, :end-column 10, :arglists (quote ([request-id kind & args])), :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(request-id kind args)], :arglists ([request-id kind & args]), :arglists-meta (nil)}}, :name dirac.runtime.repl/log, :variadic true, :file "resources/unpacked/compiled/popup/dirac/runtime/repl.cljs", :end-column 10, :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(request-id kind args)], :arglists ([request-id kind & args]), :arglists-meta (nil)}, :method-params [(request-id kind args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 40, :end-line 40, :max-fixed-arity 2, :fn-var true, :arglists ([request-id kind & args])}, present-java-trace {:protocol-inline nil, :meta {:file "/Users/jacob/Desktop/thesis-cljs/resources/unpacked/compiled/popup/dirac/runtime/repl.cljs", :line 82, :column 7, :end-line 82, :end-column 25, :arglists (quote ([request-id text]))}, :name dirac.runtime.repl/present-java-trace, :variadic false, :file "resources/unpacked/compiled/popup/dirac/runtime/repl.cljs", :end-column 25, :method-params ([request-id text]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 82, :end-line 82, :max-fixed-arity 2, :fn-var true, :arglists (quote ([request-id text]))}, present-repl-result {:protocol-inline nil, :meta {:file "/Users/jacob/Desktop/thesis-cljs/resources/unpacked/compiled/popup/dirac/runtime/repl.cljs", :line 103, :column 16, :end-line 103, :end-column 35, :export true, :arglists (quote ([request-id value])), :doc "Called by our nREPL boilerplate when we capture REPL evaluation result."}, :name dirac.runtime.repl/present-repl-result, :variadic false, :file "resources/unpacked/compiled/popup/dirac/runtime/repl.cljs", :end-column 35, :method-params ([request-id value]), :protocol-impl nil, :export true, :arglists-meta (nil nil), :column 1, :line 103, :end-line 103, :max-fixed-arity 2, :fn-var true, :arglists (quote ([request-id value])), :doc "Called by our nREPL boilerplate when we capture REPL evaluation result."}, console-tunnel {:protocol-inline nil, :meta {:file "/Users/jacob/Desktop/thesis-cljs/resources/unpacked/compiled/popup/dirac/runtime/repl.cljs", :line 28, :column 7, :end-line 28, :end-column 21, :arglists (quote ([method & args])), :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(method args)], :arglists ([method & args]), :arglists-meta (nil)}}, :name dirac.runtime.repl/console-tunnel, :variadic true, :file "resources/unpacked/compiled/popup/dirac/runtime/repl.cljs", :end-column 21, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(method args)], :arglists ([method & args]), :arglists-meta (nil)}, :method-params [(method args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 28, :end-line 28, :max-fixed-arity 1, :fn-var true, :arglists ([method & args])}, group {:protocol-inline nil, :meta {:file "/Users/jacob/Desktop/thesis-cljs/resources/unpacked/compiled/popup/dirac/runtime/repl.cljs", :line 55, :column 7, :end-line 55, :end-column 12, :arglists (quote ([& args])), :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(args)], :arglists ([& args]), :arglists-meta (nil)}}, :name dirac.runtime.repl/group, :variadic true, :file "resources/unpacked/compiled/popup/dirac/runtime/repl.cljs", :end-column 12, :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(args)], :arglists ([& args]), :arglists-meta (nil)}, :method-params [(args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 55, :end-line 55, :max-fixed-arity 0, :fn-var true, :arglists ([& args])}, *installed?* {:name dirac.runtime.repl/*installed?*, :file "resources/unpacked/compiled/popup/dirac/runtime/repl.cljs", :line 21, :column 1, :end-line 21, :end-column 28, :dynamic true, :meta {:file "/Users/jacob/Desktop/thesis-cljs/resources/unpacked/compiled/popup/dirac/runtime/repl.cljs", :line 21, :column 16, :end-line 21, :end-column 28, :dynamic true}}, call-dirac {:protocol-inline nil, :meta {:file "/Users/jacob/Desktop/thesis-cljs/resources/unpacked/compiled/popup/dirac/runtime/repl.cljs", :line 37, :column 7, :end-line 37, :end-column 17, :arglists (quote ([name & args])), :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(name args)], :arglists ([name & args]), :arglists-meta (nil)}}, :name dirac.runtime.repl/call-dirac, :variadic true, :file "resources/unpacked/compiled/popup/dirac/runtime/repl.cljs", :end-column 17, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(name args)], :arglists ([name & args]), :arglists-meta (nil)}, :method-params [(name args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 37, :end-line 37, :max-fixed-arity 1, :fn-var true, :arglists ([name & args])}, warn {:protocol-inline nil, :meta {:file "/Users/jacob/Desktop/thesis-cljs/resources/unpacked/compiled/popup/dirac/runtime/repl.cljs", :line 43, :column 7, :end-line 43, :end-column 11, :arglists (quote ([request-id kind & args])), :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(request-id kind args)], :arglists ([request-id kind & args]), :arglists-meta (nil)}}, :name dirac.runtime.repl/warn, :variadic true, :file "resources/unpacked/compiled/popup/dirac/runtime/repl.cljs", :end-column 11, :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(request-id kind args)], :arglists ([request-id kind & args]), :arglists-meta (nil)}, :method-params [(request-id kind args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 43, :end-line 43, :max-fixed-arity 2, :fn-var true, :arglists ([request-id kind & args])}, install! {:protocol-inline nil, :meta {:file "/Users/jacob/Desktop/thesis-cljs/resources/unpacked/compiled/popup/dirac/runtime/repl.cljs", :line 150, :column 7, :end-line 150, :end-column 15, :arglists (quote ([]))}, :name dirac.runtime.repl/install!, :variadic false, :file "resources/unpacked/compiled/popup/dirac/runtime/repl.cljs", :end-column 15, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 150, :end-line 150, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, postprocess-successful-eval {:protocol-inline nil, :meta {:file "/Users/jacob/Desktop/thesis-cljs/resources/unpacked/compiled/popup/dirac/runtime/repl.cljs", :line 123, :column 16, :end-line 123, :end-column 43, :export true, :arglists (quote ([value])), :doc "This is a postprocessing function wrapping weasel javascript evaluation attempt.\n  This structure is needed for building response to nREPL server (see dirac.implant.weasel in Dirac project)\n  In our case weasel is running in the context of Dirac DevTools and could potentially have different version of cljs runtime.\n  To be correct we have to do this post-processing in app's context to use the same cljs runtime as app evaluating the code.\n\n  Also we have to be careful to not enter into infinite printing with cyclic data structures.\n  We limit printing level and length."}, :name dirac.runtime.repl/postprocess-successful-eval, :variadic false, :file "resources/unpacked/compiled/popup/dirac/runtime/repl.cljs", :end-column 43, :method-params ([value]), :protocol-impl nil, :export true, :arglists-meta (nil nil), :column 1, :line 123, :end-line 123, :max-fixed-arity 1, :fn-var true, :arglists (quote ([value])), :doc "This is a postprocessing function wrapping weasel javascript evaluation attempt.\n  This structure is needed for building response to nREPL server (see dirac.implant.weasel in Dirac project)\n  In our case weasel is running in the context of Dirac DevTools and could potentially have different version of cljs runtime.\n  To be correct we have to do this post-processing in app's context to use the same cljs runtime as app evaluating the code.\n\n  Also we have to be careful to not enter into infinite printing with cyclic data structures.\n  We limit printing level and length."}, present-output {:protocol-inline nil, :meta {:file "/Users/jacob/Desktop/thesis-cljs/resources/unpacked/compiled/popup/dirac/runtime/repl.cljs", :line 114, :column 16, :end-line 114, :end-column 30, :export true, :arglists (quote ([request-id kind text]))}, :name dirac.runtime.repl/present-output, :variadic false, :file "resources/unpacked/compiled/popup/dirac/runtime/repl.cljs", :end-column 30, :method-params ([request-id kind text]), :protocol-impl nil, :export true, :arglists-meta (nil nil), :column 1, :line 114, :end-line 114, :max-fixed-arity 3, :fn-var true, :arglists (quote ([request-id kind text]))}, api-version {:name dirac.runtime.repl/api-version, :file "resources/unpacked/compiled/popup/dirac/runtime/repl.cljs", :line 95, :column 1, :end-line 95, :end-column 17, :meta {:file "/Users/jacob/Desktop/thesis-cljs/resources/unpacked/compiled/popup/dirac/runtime/repl.cljs", :line 95, :column 6, :end-line 95, :end-column 17}}, present-repl-exception {:protocol-inline nil, :meta {:file "/Users/jacob/Desktop/thesis-cljs/resources/unpacked/compiled/popup/dirac/runtime/repl.cljs", :line 109, :column 16, :end-line 109, :end-column 38, :export true, :arglists (quote ([request-id exception])), :doc "Called by our nREPL boilerplate when we capture REPL evaluation exception."}, :name dirac.runtime.repl/present-repl-exception, :variadic false, :file "resources/unpacked/compiled/popup/dirac/runtime/repl.cljs", :end-column 38, :method-params ([request-id exception]), :protocol-impl nil, :export true, :arglists-meta (nil nil), :column 1, :line 109, :end-line 109, :max-fixed-arity 2, :fn-var true, :arglists (quote ([request-id exception])), :doc "Called by our nREPL boilerplate when we capture REPL evaluation exception."}, get-whitespace-prefix-length {:protocol-inline nil, :meta {:file "/Users/jacob/Desktop/thesis-cljs/resources/unpacked/compiled/popup/dirac/runtime/repl.cljs", :line 69, :column 7, :end-line 69, :end-column 35, :arglists (quote ([line]))}, :name dirac.runtime.repl/get-whitespace-prefix-length, :variadic false, :file "resources/unpacked/compiled/popup/dirac/runtime/repl.cljs", :end-column 35, :method-params ([line]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 69, :end-line 69, :max-fixed-arity 1, :fn-var true, :arglists (quote ([line]))}, detect-and-strip {:protocol-inline nil, :meta {:file "/Users/jacob/Desktop/thesis-cljs/resources/unpacked/compiled/popup/dirac/runtime/repl.cljs", :line 63, :column 7, :end-line 63, :end-column 23, :arglists (quote ([prefix text]))}, :name dirac.runtime.repl/detect-and-strip, :variadic false, :file "resources/unpacked/compiled/popup/dirac/runtime/repl.cljs", :end-column 23, :method-params ([prefix text]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 63, :end-line 63, :max-fixed-arity 2, :fn-var true, :arglists (quote ([prefix text]))}, available? {:protocol-inline nil, :meta {:file "/Users/jacob/Desktop/thesis-cljs/resources/unpacked/compiled/popup/dirac/runtime/repl.cljs", :line 18, :column 17, :end-line 18, :end-column 27, :dynamic true, :arglists (quote ([]))}, :name dirac.runtime.repl/available?, :variadic false, :file "resources/unpacked/compiled/popup/dirac/runtime/repl.cljs", :end-column 27, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :dynamic true, :line 18, :end-line 18, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, installed? {:protocol-inline nil, :meta {:file "/Users/jacob/Desktop/thesis-cljs/resources/unpacked/compiled/popup/dirac/runtime/repl.cljs", :line 147, :column 7, :end-line 147, :end-column 17, :arglists (quote ([]))}, :name dirac.runtime.repl/installed?, :variadic false, :file "resources/unpacked/compiled/popup/dirac/runtime/repl.cljs", :end-column 17, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 147, :end-line 147, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, remove-common-whitespace-prefix {:protocol-inline nil, :meta {:file "/Users/jacob/Desktop/thesis-cljs/resources/unpacked/compiled/popup/dirac/runtime/repl.cljs", :line 74, :column 7, :end-line 74, :end-column 38, :arglists (quote ([text]))}, :name dirac.runtime.repl/remove-common-whitespace-prefix, :variadic false, :file "resources/unpacked/compiled/popup/dirac/runtime/repl.cljs", :end-column 38, :method-params ([text]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 74, :end-line 74, :max-fixed-arity 1, :fn-var true, :arglists (quote ([text]))}, postprocess-unsuccessful-eval {:protocol-inline nil, :meta {:file "/Users/jacob/Desktop/thesis-cljs/resources/unpacked/compiled/popup/dirac/runtime/repl.cljs", :line 137, :column 16, :end-line 137, :end-column 45, :export true, :arglists (quote ([ex]))}, :name dirac.runtime.repl/postprocess-unsuccessful-eval, :variadic false, :file "resources/unpacked/compiled/popup/dirac/runtime/repl.cljs", :end-column 45, :method-params ([ex]), :protocol-impl nil, :export true, :arglists-meta (nil nil), :column 1, :line 137, :end-line 137, :max-fixed-arity 1, :fn-var true, :arglists (quote ([ex]))}, get-api-version {:protocol-inline nil, :meta {:file "/Users/jacob/Desktop/thesis-cljs/resources/unpacked/compiled/popup/dirac/runtime/repl.cljs", :line 97, :column 16, :end-line 97, :end-column 31, :export true, :arglists (quote ([]))}, :name dirac.runtime.repl/get-api-version, :variadic false, :file "resources/unpacked/compiled/popup/dirac/runtime/repl.cljs", :end-column 31, :method-params ([]), :protocol-impl nil, :export true, :arglists-meta (nil nil), :column 1, :line 97, :end-line 97, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, group-collapsed {:protocol-inline nil, :meta {:file "/Users/jacob/Desktop/thesis-cljs/resources/unpacked/compiled/popup/dirac/runtime/repl.cljs", :line 52, :column 7, :end-line 52, :end-column 22, :arglists (quote ([& args])), :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(args)], :arglists ([& args]), :arglists-meta (nil)}}, :name dirac.runtime.repl/group-collapsed, :variadic true, :file "resources/unpacked/compiled/popup/dirac/runtime/repl.cljs", :end-column 22, :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(args)], :arglists ([& args]), :arglists-meta (nil)}, :method-params [(args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 52, :end-line 52, :max-fixed-arity 0, :fn-var true, :arglists ([& args])}, group-end {:protocol-inline nil, :meta {:file "/Users/jacob/Desktop/thesis-cljs/resources/unpacked/compiled/popup/dirac/runtime/repl.cljs", :line 58, :column 7, :end-line 58, :end-column 16, :arglists (quote ([]))}, :name dirac.runtime.repl/group-end, :variadic false, :file "resources/unpacked/compiled/popup/dirac/runtime/repl.cljs", :end-column 16, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 58, :end-line 58, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, uninstall! {:protocol-inline nil, :meta {:file "/Users/jacob/Desktop/thesis-cljs/resources/unpacked/compiled/popup/dirac/runtime/repl.cljs", :line 156, :column 7, :end-line 156, :end-column 17, :arglists (quote ([]))}, :name dirac.runtime.repl/uninstall!, :variadic false, :file "resources/unpacked/compiled/popup/dirac/runtime/repl.cljs", :end-column 17, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 156, :end-line 156, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, dirac-log-args {:protocol-inline nil, :meta {:file "/Users/jacob/Desktop/thesis-cljs/resources/unpacked/compiled/popup/dirac/runtime/repl.cljs", :line 34, :column 7, :end-line 34, :end-column 21, :arglists (quote ([request-id kind args]))}, :name dirac.runtime.repl/dirac-log-args, :variadic false, :file "resources/unpacked/compiled/popup/dirac/runtime/repl.cljs", :end-column 21, :method-params ([request-id kind args]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 34, :end-line 34, :max-fixed-arity 3, :fn-var true, :arglists (quote ([request-id kind args]))}, get-effective-config {:protocol-inline nil, :meta {:file "/Users/jacob/Desktop/thesis-cljs/resources/unpacked/compiled/popup/dirac/runtime/repl.cljs", :line 100, :column 16, :end-line 100, :end-column 36, :export true, :arglists (quote ([]))}, :name dirac.runtime.repl/get-effective-config, :variadic false, :file "resources/unpacked/compiled/popup/dirac/runtime/repl.cljs", :end-column 36, :method-params ([]), :protocol-impl nil, :export true, :arglists-meta (nil nil), :column 1, :line 100, :end-line 100, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, error {:protocol-inline nil, :meta {:file "/Users/jacob/Desktop/thesis-cljs/resources/unpacked/compiled/popup/dirac/runtime/repl.cljs", :line 46, :column 7, :end-line 46, :end-column 12, :arglists (quote ([request-id kind & args])), :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(request-id kind args)], :arglists ([request-id kind & args]), :arglists-meta (nil)}}, :name dirac.runtime.repl/error, :variadic true, :file "resources/unpacked/compiled/popup/dirac/runtime/repl.cljs", :end-column 12, :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(request-id kind args)], :arglists ([request-id kind & args]), :arglists-meta (nil)}, :method-params [(request-id kind args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 46, :end-line 46, :max-fixed-arity 2, :fn-var true, :arglists ([request-id kind & args])}, group* {:protocol-inline nil, :meta {:file "/Users/jacob/Desktop/thesis-cljs/resources/unpacked/compiled/popup/dirac/runtime/repl.cljs", :line 49, :column 7, :end-line 49, :end-column 13, :arglists (quote ([collapsed? request-id kind & args])), :top-fn {:variadic true, :max-fixed-arity 3, :method-params [(collapsed? request-id kind args)], :arglists ([collapsed? request-id kind & args]), :arglists-meta (nil)}}, :name dirac.runtime.repl/group*, :variadic true, :file "resources/unpacked/compiled/popup/dirac/runtime/repl.cljs", :end-column 13, :top-fn {:variadic true, :max-fixed-arity 3, :method-params [(collapsed? request-id kind args)], :arglists ([collapsed? request-id kind & args]), :arglists-meta (nil)}, :method-params [(collapsed? request-id kind args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 49, :end-line 49, :max-fixed-arity 3, :fn-var true, :arglists ([collapsed? request-id kind & args])}}, :require-macros {dirac.runtime.prefs dirac.runtime.prefs}, :cljs.analyzer/constants {:seen #{:java-trace-header-style :dirac-print-length :dirac-print-level :stderr}, :order [:stderr :java-trace-header-style :dirac-print-level :dirac-print-length]}, :doc nil}