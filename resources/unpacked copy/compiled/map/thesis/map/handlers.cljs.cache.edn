;; Analyzed by ClojureScript 1.8.51
{:use-macros {log chromex.logging, go cljs.core.async.macros, oget chromex.support, go-loop cljs.core.async.macros, connect chromex.ext.runtime}, :excludes #{}, :name thesis.map.handlers, :imports {Uri goog.Uri}, :requires {chromex.ext.runtime chromex.ext.runtime, Uri goog.Uri, chromex.protocols chromex.protocols, reagent.core reagent.core, r reagent.core, chromex.support chromex.support, chromex.logging chromex.logging, string clojure.string, runtime chromex.ext.runtime, clojure.string clojure.string, st thesis.background.storage, chromex.ext.storage chromex.ext.storage, thesis.background.storage thesis.background.storage, storage chromex.ext.storage, re-frame.core re-frame.core}, :uses {path re-frame.core, debug re-frame.core, trim-v re-frame.core, dispatch re-frame.core, after re-frame.core, post-message! chromex.protocols, register-handler re-frame.core}, :defs {call-chan {:name thesis.map.handlers/call-chan, :file "src/map/thesis/map/handlers.cljs", :line 14, :column 1, :end-line 14, :end-column 15, :meta {:file "/Users/jacob/Desktop/thesis-cljs/src/map/thesis/map/handlers.cljs", :line 14, :column 6, :end-line 14, :end-column 15}}, post! {:protocol-inline nil, :meta {:file "/Users/jacob/Desktop/thesis-cljs/src/map/thesis/map/handlers.cljs", :line 16, :column 7, :end-line 16, :end-column 12, :arglists (quote ([db msg]))}, :name thesis.map.handlers/post!, :variadic false, :file "src/map/thesis/map/handlers.cljs", :end-column 12, :method-params ([db msg]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 16, :end-line 16, :max-fixed-arity 2, :fn-var true, :arglists (quote ([db msg]))}, listen! {:protocol-inline nil, :meta {:file "/Users/jacob/Desktop/thesis-cljs/src/map/thesis/map/handlers.cljs", :line 19, :column 7, :end-line 19, :end-column 14, :arglists (quote ([res-chan]))}, :name thesis.map.handlers/listen!, :variadic false, :file "src/map/thesis/map/handlers.cljs", :end-column 14, :method-params ([res-chan]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 19, :end-line 19, :max-fixed-arity 1, :fn-var true, :arglists (quote ([res-chan]))}, connect-to-background-page! {:protocol-inline nil, :meta {:file "/Users/jacob/Desktop/thesis-cljs/src/map/thesis/map/handlers.cljs", :line 45, :column 7, :end-line 45, :end-column 34, :arglists (quote ([]))}, :name thesis.map.handlers/connect-to-background-page!, :variadic false, :file "src/map/thesis/map/handlers.cljs", :end-column 34, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 45, :end-line 45, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}}, :require-macros {cljs.core.async.macros cljs.core.async.macros, r reagent.core, reagent.core reagent.core, storage chromex.ext.storage, chromex.ext.storage chromex.ext.storage, chromex.support chromex.support, chromex.logging chromex.logging, runtime chromex.ext.runtime, chromex.ext.runtime chromex.ext.runtime}, :cljs.analyzer/constants {:seen #{:show-domain-info :track-mouse :get-location-counts :domain-info :has-loaded-domains? :show-site-info :site-info :else :handle-history :handle-location :show-state :handle-location-counts :distinct-locations :view-mode :history :mouse :get-domain-info :recur :display-info-box? :location-counts :handle-window :distinct-domains :port :handle-domain-info :window :loading-domains? :get-my-location :req :handle-locations :loading-site-info? :display-info-box :reqtype :lon :track-window :handle-site-info :handle-counts :loading-domain-info? :lat :get-counts :loading-locations? :domain :omit :init-box :my-location :typ :loading-location-counts? :keywordize-keys :initted :initialise-db :get-locations :handle-mouse :get-history :data :get-site-info}, :order [:port :recur :handle-location-counts :handle-site-info :handle-domain-info :handle-locations :data :domain :init-box :handle-counts :else :omit :get-history :handle-history :history :get-domain-info :reqtype :req :typ :loading-domain-info? :domain-info :site-info :loading-site-info? :display-info-box :display-info-box? :get-site-info :get-my-location :handle-location :keywordize-keys :lat :my-location :lon :get-locations :loading-locations? :get-location-counts :location-counts :loading-location-counts? :distinct-locations :get-counts :has-loaded-domains? :loading-domains? :distinct-domains :initialise-db :initted :track-mouse :handle-mouse :mouse :show-state :track-window :handle-window :window :view-mode :show-site-info :show-domain-info]}, :doc nil}