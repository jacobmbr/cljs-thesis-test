;; Analyzed by ClojureScript 1.8.51
{:use-macros nil, :excludes #{}, :name thesis.content-script.animation, :imports nil, :requires {reagent reagent.core, reagent.core reagent.core, events goog.events, goog.events goog.events, EventType goog.events.EventType, goog.events.EventType goog.events.EventType, dom goog.dom, goog.dom goog.dom}, :uses nil, :defs {interval {:protocol-inline nil, :meta {:file "/Users/jacob/Desktop/thesis-cljs/src/content_script/thesis/content_script/animation.cljs", :line 241, :column 7, :end-line 241, :end-column 15, :arglists (quote ([f t])), :doc "Call function f every period t while mounted in the DOM."}, :name thesis.content-script.animation/interval, :variadic false, :file "/Users/jacob/Desktop/thesis-cljs/src/content_script/thesis/content_script/animation.cljs", :end-column 15, :method-params ([f t]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 241, :end-line 241, :max-fixed-arity 2, :fn-var true, :arglists (quote ([f t])), :doc "Call function f every period t while mounted in the DOM."}, timeline {:protocol-inline nil, :meta {:file "/Users/jacob/Desktop/thesis-cljs/src/content_script/thesis/content_script/animation.cljs", :line 304, :column 7, :end-line 304, :end-column 15, :arglists (quote ([x & xs])), :doc "Given a sequence of inputs, will consume them depending on their type:\n  numbers will be a sleep in milliseconds\n  functions will be called with no arguments\n  vectors will be rendered as reagent components.", :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(x xs)], :arglists ([x & xs]), :arglists-meta (nil)}}, :name thesis.content-script.animation/timeline, :variadic true, :file "/Users/jacob/Desktop/thesis-cljs/src/content_script/thesis/content_script/animation.cljs", :end-column 15, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(x xs)], :arglists ([x & xs]), :arglists-meta (nil)}, :method-params [(x xs)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 304, :end-line 304, :max-fixed-arity 1, :fn-var true, :arglists ([x & xs]), :doc "Given a sequence of inputs, will consume them depending on their type:\n  numbers will be a sleep in milliseconds\n  functions will be called with no arguments\n  vectors will be rendered as reagent components."}, timeout {:protocol-inline nil, :meta {:file "/Users/jacob/Desktop/thesis-cljs/src/content_script/thesis/content_script/animation.cljs", :line 256, :column 7, :end-line 256, :end-column 14, :arglists (quote ([f t])), :doc "Call function f period t in milliseconds after being mounted in the DOM,\n  only if still mounted."}, :name thesis.content-script.animation/timeout, :variadic false, :file "/Users/jacob/Desktop/thesis-cljs/src/content_script/thesis/content_script/animation.cljs", :end-column 14, :method-params ([f t]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 256, :end-line 256, :max-fixed-arity 2, :fn-var true, :arglists (quote ([f t])), :doc "Call function f period t in milliseconds after being mounted in the DOM,\n  only if still mounted."}, and-then {:protocol-inline nil, :meta {:file "/Users/jacob/Desktop/thesis-cljs/src/content_script/thesis/content_script/animation.cljs", :line 272, :column 17, :end-line 272, :end-column 25, :private true, :arglists (quote ([id element x & more])), :doc "Use timeline instead of this function directly.\n  Provides a way to express a sequence of actions and pauses.\n  Takes an id atom, element ratom,\n  and a sequence of numbers and/or callback functions and/or vectors.\n  Treats numbers as a wait timeout in milliseconds,\n  calls callbacks after the elapsed time.\n  id is reset as the timeout reference for cleanup.\n  element is reset to vectors for rendering. ", :top-fn {:variadic true, :max-fixed-arity 3, :method-params [(id element x more)], :arglists ([id element x & more]), :arglists-meta (nil)}}, :private true, :name thesis.content-script.animation/and-then, :variadic true, :file "/Users/jacob/Desktop/thesis-cljs/src/content_script/thesis/content_script/animation.cljs", :end-column 25, :top-fn {:variadic true, :max-fixed-arity 3, :method-params [(id element x more)], :arglists ([id element x & more]), :arglists-meta (nil)}, :method-params [(id element x more)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 272, :end-line 272, :max-fixed-arity 3, :fn-var true, :arglists ([id element x & more]), :doc "Use timeline instead of this function directly.\n  Provides a way to express a sequence of actions and pauses.\n  Takes an id atom, element ratom,\n  and a sequence of numbers and/or callback functions and/or vectors.\n  Treats numbers as a wait timeout in milliseconds,\n  calls callbacks after the elapsed time.\n  id is reset as the timeout reference for cleanup.\n  element is reset to vectors for rendering. "}, stiffness {:name thesis.content-script.animation/stiffness, :file "/Users/jacob/Desktop/thesis-cljs/src/content_script/thesis/content_script/animation.cljs", :line 163, :column 1, :end-line 163, :end-column 25, :private true, :meta {:file "/Users/jacob/Desktop/thesis-cljs/src/content_script/thesis/content_script/animation.cljs", :line 163, :column 16, :end-line 163, :end-column 25, :private true}}, mass {:name thesis.content-script.animation/mass, :file "/Users/jacob/Desktop/thesis-cljs/src/content_script/thesis/content_script/animation.cljs", :line 162, :column 1, :end-line 162, :end-column 20, :private true, :meta {:file "/Users/jacob/Desktop/thesis-cljs/src/content_script/thesis/content_script/animation.cljs", :line 162, :column 16, :end-line 162, :end-column 20, :private true}}, pop-when {:protocol-inline nil, :meta {:file "/Users/jacob/Desktop/thesis-cljs/src/content_script/thesis/content_script/animation.cljs", :line 27, :column 7, :end-line 27, :end-column 15, :arglists (quote ([condition then] [condition then options])), :doc "Wraps a component to animate creation and destruction.\n  Takes a condition ratom and a vector or value to be rendered.\n  Options can contain duration (milliseconds)\n  and easing (a function that takes a b duration t).", :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([condition then] [condition then options]), :arglists ([condition then] [condition then options]), :arglists-meta (nil nil)}}, :name thesis.content-script.animation/pop-when, :variadic false, :file "/Users/jacob/Desktop/thesis-cljs/src/content_script/thesis/content_script/animation.cljs", :end-column 15, :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([condition then] [condition then options]), :arglists ([condition then] [condition then options]), :arglists-meta (nil nil)}, :method-params ([condition then] [condition then options]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 27, :end-line 27, :max-fixed-arity 3, :fn-var true, :arglists ([condition then] [condition then options]), :doc "Wraps a component to animate creation and destruction.\n  Takes a condition ratom and a vector or value to be rendered.\n  Options can contain duration (milliseconds)\n  and easing (a function that takes a b duration t)."}, get-scroll-x {:protocol-inline nil, :meta {:file "/Users/jacob/Desktop/thesis-cljs/src/content_script/thesis/content_script/animation.cljs", :line 334, :column 7, :end-line 334, :end-column 19, :arglists (quote ([])), :doc "Gets the current document x scroll position."}, :name thesis.content-script.animation/get-scroll-x, :variadic false, :file "/Users/jacob/Desktop/thesis-cljs/src/content_script/thesis/content_script/animation.cljs", :end-column 19, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 334, :end-line 334, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :doc "Gets the current document x scroll position."}, scroll-x {:name thesis.content-script.animation/scroll-x, :file "/Users/jacob/Desktop/thesis-cljs/src/content_script/thesis/content_script/animation.cljs", :line 349, :column 1, :end-line 349, :end-column 14, :meta {:file "/Users/jacob/Desktop/thesis-cljs/src/content_script/thesis/content_script/animation.cljs", :line 349, :column 6, :end-line 349, :end-column 14}, :doc "A ratom for watching the current document x scroll,\n  will be updated when there is a scroll event."}, now {:protocol-inline nil, :meta {:file "/Users/jacob/Desktop/thesis-cljs/src/content_script/thesis/content_script/animation.cljs", :line 16, :column 17, :end-line 16, :end-column 20, :private true, :arglists (quote ([]))}, :private true, :name thesis.content-script.animation/now, :variadic false, :file "/Users/jacob/Desktop/thesis-cljs/src/content_script/thesis/content_script/animation.cljs", :end-column 20, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 16, :end-line 16, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, evaluate {:protocol-inline nil, :meta {:file "/Users/jacob/Desktop/thesis-cljs/src/content_script/thesis/content_script/animation.cljs", :line 166, :column 17, :end-line 166, :end-column 25, :private true, :arglists (quote ([x2 dt x v a {:keys [mass stiffness damping]}])), :doc "This is where the spring physics formula is applied."}, :private true, :name thesis.content-script.animation/evaluate, :variadic false, :file "/Users/jacob/Desktop/thesis-cljs/src/content_script/thesis/content_script/animation.cljs", :end-column 25, :method-params ([x2 dt x v a p__33911]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 166, :end-line 166, :max-fixed-arity 6, :fn-var true, :arglists (quote ([x2 dt x v a {:keys [mass stiffness damping]}])), :doc "This is where the spring physics formula is applied."}, get-scroll-y {:protocol-inline nil, :meta {:file "/Users/jacob/Desktop/thesis-cljs/src/content_script/thesis/content_script/animation.cljs", :line 325, :column 7, :end-line 325, :end-column 19, :arglists (quote ([])), :doc "Gets the current document y scroll position."}, :name thesis.content-script.animation/get-scroll-y, :variadic false, :file "/Users/jacob/Desktop/thesis-cljs/src/content_script/thesis/content_script/animation.cljs", :end-column 19, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 325, :end-line 325, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :doc "Gets the current document y scroll position."}, scroll-y {:name thesis.content-script.animation/scroll-y, :file "/Users/jacob/Desktop/thesis-cljs/src/content_script/thesis/content_script/animation.cljs", :line 339, :column 1, :end-line 339, :end-column 14, :meta {:file "/Users/jacob/Desktop/thesis-cljs/src/content_script/thesis/content_script/animation.cljs", :line 339, :column 6, :end-line 339, :end-column 14}, :doc "A ratom for watching the current document y scroll,\n  will be updated when there is a scroll event."}, toggle-handler {:protocol-inline nil, :meta {:file "/Users/jacob/Desktop/thesis-cljs/src/content_script/thesis/content_script/animation.cljs", :line 56, :column 7, :end-line 56, :end-column 21, :arglists (quote ([ratom])), :doc "Creates an event handler that will toggle a given ratom."}, :name thesis.content-script.animation/toggle-handler, :variadic false, :file "/Users/jacob/Desktop/thesis-cljs/src/content_script/thesis/content_script/animation.cljs", :end-column 21, :method-params ([ratom]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 56, :end-line 56, :max-fixed-arity 1, :fn-var true, :arglists (quote ([ratom])), :doc "Creates an event handler that will toggle a given ratom."}, mouse-watcher {:protocol-inline nil, :meta {:file "/Users/jacob/Desktop/thesis-cljs/src/content_script/thesis/content_script/animation.cljs", :line 63, :column 7, :end-line 63, :end-column 20, :arglists (quote ([ratom])), :doc "Returns a map suitable for merging with component properties,\n  that will keep a given ratom updated with the mouseover status."}, :name thesis.content-script.animation/mouse-watcher, :variadic false, :file "/Users/jacob/Desktop/thesis-cljs/src/content_script/thesis/content_script/animation.cljs", :end-column 20, :method-params ([ratom]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 63, :end-line 63, :max-fixed-arity 1, :fn-var true, :arglists (quote ([ratom])), :doc "Returns a map suitable for merging with component properties,\n  that will keep a given ratom updated with the mouseover status."}, interpolate-to {:protocol-inline nil, :meta {:file "/Users/jacob/Desktop/thesis-cljs/src/content_script/thesis/content_script/animation.cljs", :line 103, :column 7, :end-line 103, :end-column 21, :arglists (quote ([x] [x options])), :doc "Interpolates toward new values.\n  Takes a ratom which stores a numeric value.\n  Options can contain duration (in milliseconds)\n  and easing (a function of a b duration t).", :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([x] [x options]), :arglists ([x] [x options]), :arglists-meta (nil nil)}}, :name thesis.content-script.animation/interpolate-to, :variadic false, :file "/Users/jacob/Desktop/thesis-cljs/src/content_script/thesis/content_script/animation.cljs", :end-column 21, :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([x] [x options]), :arglists ([x] [x options]), :arglists-meta (nil nil)}, :method-params ([x] [x options]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 103, :end-line 103, :max-fixed-arity 2, :fn-var true, :arglists ([x] [x options]), :doc "Interpolates toward new values.\n  Takes a ratom which stores a numeric value.\n  Options can contain duration (in milliseconds)\n  and easing (a function of a b duration t)."}, interpolate {:protocol-inline nil, :meta {:file "/Users/jacob/Desktop/thesis-cljs/src/content_script/thesis/content_script/animation.cljs", :line 19, :column 17, :end-line 19, :end-column 28, :private true, :arglists (quote ([a b duration t])), :doc "Calculates a value between a and b relative to t in duration."}, :private true, :name thesis.content-script.animation/interpolate, :variadic false, :file "/Users/jacob/Desktop/thesis-cljs/src/content_script/thesis/content_script/animation.cljs", :end-column 28, :method-params ([a b duration t]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 19, :end-line 19, :max-fixed-arity 4, :fn-var true, :arglists (quote ([a b duration t])), :doc "Calculates a value between a and b relative to t in duration."}, integrate-rk4 {:protocol-inline nil, :meta {:file "/Users/jacob/Desktop/thesis-cljs/src/content_script/thesis/content_script/animation.cljs", :line 175, :column 17, :end-line 175, :end-column 30, :private true, :arglists (quote ([x2 dt x v options])), :doc "Takes an itegration step from numbers x to x2 over time dt,\n  with a present velocity v."}, :private true, :name thesis.content-script.animation/integrate-rk4, :variadic false, :file "/Users/jacob/Desktop/thesis-cljs/src/content_script/thesis/content_script/animation.cljs", :end-column 30, :method-params ([x2 dt x v options]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 175, :end-line 175, :max-fixed-arity 5, :fn-var true, :arglists (quote ([x2 dt x v options])), :doc "Takes an itegration step from numbers x to x2 over time dt,\n  with a present velocity v."}, small {:protocol-inline nil, :meta {:file "/Users/jacob/Desktop/thesis-cljs/src/content_script/thesis/content_script/animation.cljs", :line 188, :column 17, :end-line 188, :end-column 22, :private true, :arglists (quote ([x]))}, :private true, :name thesis.content-script.animation/small, :variadic false, :file "/Users/jacob/Desktop/thesis-cljs/src/content_script/thesis/content_script/animation.cljs", :end-column 22, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 188, :end-line 188, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x]))}, interpolate-if {:protocol-inline nil, :meta {:file "/Users/jacob/Desktop/thesis-cljs/src/content_script/thesis/content_script/animation.cljs", :line 77, :column 7, :end-line 77, :end-column 21, :arglists (quote ([condition a b] [condition a b options])), :doc "Interpolates between two values when the conditon changes.\n  Takes a condition ratom to watch, and 2 vectors or values to render.\n  Options can contain duration (in milliseconds)\n  and easing (a function of a b duration t).", :top-fn {:variadic false, :max-fixed-arity 4, :method-params ([condition a b] [condition a b options]), :arglists ([condition a b] [condition a b options]), :arglists-meta (nil nil)}}, :name thesis.content-script.animation/interpolate-if, :variadic false, :file "/Users/jacob/Desktop/thesis-cljs/src/content_script/thesis/content_script/animation.cljs", :end-column 21, :top-fn {:variadic false, :max-fixed-arity 4, :method-params ([condition a b] [condition a b options]), :arglists ([condition a b] [condition a b options]), :arglists-meta (nil nil)}, :method-params ([condition a b] [condition a b options]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 77, :end-line 77, :max-fixed-arity 4, :fn-var true, :arglists ([condition a b] [condition a b options]), :doc "Interpolates between two values when the conditon changes.\n  Takes a condition ratom to watch, and 2 vectors or values to render.\n  Options can contain duration (in milliseconds)\n  and easing (a function of a b duration t)."}, spring {:protocol-inline nil, :meta {:file "/Users/jacob/Desktop/thesis-cljs/src/content_script/thesis/content_script/animation.cljs", :line 191, :column 7, :end-line 191, :end-column 13, :arglists (quote ([x2] [x2 options])), :doc "Useful for wrapping a value in your component to make it springy.\n  Returns a reaction that will take values approaching x2,\n  updating every time Reagent calls requestAnimationFrame.\n  Integrates a physical spring simulation for each step.\n  Options can contain:\n  from - a value to start from (initial value is used if absent).\n  velocity of the mass on the spring (initially 0 if absent).\n  mass, stiffness, damping of the spring.", :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([x2] [x2 options]), :arglists ([x2] [x2 options]), :arglists-meta (nil nil)}}, :name thesis.content-script.animation/spring, :variadic false, :file "/Users/jacob/Desktop/thesis-cljs/src/content_script/thesis/content_script/animation.cljs", :end-column 13, :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([x2] [x2 options]), :arglists ([x2] [x2 options]), :arglists-meta (nil nil)}, :method-params ([x2] [x2 options]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 191, :end-line 191, :max-fixed-arity 2, :fn-var true, :arglists ([x2] [x2 options]), :doc "Useful for wrapping a value in your component to make it springy.\n  Returns a reaction that will take values approaching x2,\n  updating every time Reagent calls requestAnimationFrame.\n  Integrates a physical spring simulation for each step.\n  Options can contain:\n  from - a value to start from (initial value is used if absent).\n  velocity of the mass on the spring (initially 0 if absent).\n  mass, stiffness, damping of the spring."}, damping {:name thesis.content-script.animation/damping, :file "/Users/jacob/Desktop/thesis-cljs/src/content_script/thesis/content_script/animation.cljs", :line 164, :column 1, :end-line 164, :end-column 23, :private true, :meta {:file "/Users/jacob/Desktop/thesis-cljs/src/content_script/thesis/content_script/animation.cljs", :line 164, :column 16, :end-line 164, :end-column 23, :private true}}, interpolate-arg {:protocol-inline nil, :meta {:file "/Users/jacob/Desktop/thesis-cljs/src/content_script/thesis/content_script/animation.cljs", :line 136, :column 7, :end-line 136, :end-column 22, :arglists (quote ([component x] [component x options])), :doc "Interpolates the argument of a component to x.\n  Will call the given component with values approaching x.\n  Options can contain duration (in milliseconds)\n  and easing (a function of a b duration t).", :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([component x] [component x options]), :arglists ([component x] [component x options]), :arglists-meta (nil nil)}}, :name thesis.content-script.animation/interpolate-arg, :variadic false, :file "/Users/jacob/Desktop/thesis-cljs/src/content_script/thesis/content_script/animation.cljs", :end-column 22, :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([component x] [component x options]), :arglists ([component x] [component x options]), :arglists-meta (nil nil)}, :method-params ([component x] [component x options]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 136, :end-line 136, :max-fixed-arity 3, :fn-var true, :arglists ([component x] [component x options]), :doc "Interpolates the argument of a component to x.\n  Will call the given component with values approaching x.\n  Options can contain duration (in milliseconds)\n  and easing (a function of a b duration t)."}, scroll {:name thesis.content-script.animation/scroll, :file "/Users/jacob/Desktop/thesis-cljs/src/content_script/thesis/content_script/animation.cljs", :line 344, :column 1, :end-line 344, :end-column 12, :meta {:file "/Users/jacob/Desktop/thesis-cljs/src/content_script/thesis/content_script/animation.cljs", :line 344, :column 6, :end-line 344, :end-column 12}, :doc "A ratom for watching the current document y scroll,\n  will be updated when there is a scroll event."}, get-scroll {:name thesis.content-script.animation/get-scroll, :file "/Users/jacob/Desktop/thesis-cljs/src/content_script/thesis/content_script/animation.cljs", :line 330, :column 1, :end-line 330, :end-column 16, :meta {:file "/Users/jacob/Desktop/thesis-cljs/src/content_script/thesis/content_script/animation.cljs", :line 330, :column 6, :end-line 330, :end-column 16}, :doc "Gets the current document y scroll position."}, watch {:protocol-inline nil, :meta {:file "/Users/jacob/Desktop/thesis-cljs/src/content_script/thesis/content_script/animation.cljs", :line 226, :column 7, :end-line 226, :end-column 12, :arglists (quote ([r f])), :doc "Watch a ref only while mounted in the DOM."}, :name thesis.content-script.animation/watch, :variadic false, :file "/Users/jacob/Desktop/thesis-cljs/src/content_script/thesis/content_script/animation.cljs", :end-column 12, :method-params ([r f]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 226, :end-line 226, :max-fixed-arity 2, :fn-var true, :arglists (quote ([r f])), :doc "Watch a ref only while mounted in the DOM."}}, :require-macros {ratom reagent.ratom, reagent.ratom reagent.ratom, reagent reagent.core, reagent.core reagent.core}, :cljs.analyzer/constants {:seen #{:mass :v :transform :frame :else :on-mouse-out :component-did-mount :start :easing :duration :style :div :damping :reagent-render :from :opacity :condition :current :at :component-will-unmount :display-name :on-mouse-over :t :x :p :velocity :stiffness :to}, :order [:else :from :start :frame :duration :easing :div :style :transform :opacity :on-mouse-over :on-mouse-out :condition :at :to :current :mass :stiffness :damping :velocity :t :x :v :display-name :component-did-mount :component-will-unmount :reagent-render :p]}, :doc "An animation library for Reagent (ClojureScript).\n  There is only one concept:\n  A reaction that moves toward some target,\n  each step triggers another update until it reaches the end state.\n  The trigger occurs by touching a local atom a zero timeout,\n  which changes the atom in the next Reagent render."}